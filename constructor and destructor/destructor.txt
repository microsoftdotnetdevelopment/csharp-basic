Destructor in c#-
Destructors are invoked automatically, and cannot be invoked explicitly.
Destructors cannot be overloaded. Thus, a class can have, at most, one destructor.
Destructors are not inherited. Thus, a class has no destructors other than the one, which may be declared in it.
Destructors cannot be used with structs. They are only used with classes.
An instance becomes eligible for destruction when it is no longer possible for any code to use the instance.
Execution of the destructor for the instance may occur at any time after the instance becomes eligible for destruction.
When an instance is destructed, the destructors in its inheritance chain are called, in order, from most derived to least derived.
Destructors are used to destruct instances of classes.  
In C# you can never call them, the reason is one cannot destroy an object.
So who has the control over the destructor (in C#)? it's the .NET frameworks Garbage Collector (GC).  

Syntax of Destructor(~)

~ ClassName()

using System;
namespace destructorex
{
    class Program
    {
        ~Program() // destructor define 
        { 
           // clean up statement
        }
    }
}

Characteristics of  Destructor
Destructors (~) cannot be defined in Structs.
Destructors (~) are only used with classes.
Destructor cannot be inherited or overloaded.
Destructor does not take modifiers or have parameters.
Destructor cannot be called. They are invoked automatically.
An instance becomes eligible for destruction when it is no longer possible for any code to use the instance.
The Programmer has no control over when destructor is called because this is determined by Garbage Collector.
Destructor is called when program exits.
Execution of the destructor for the instance may occur at any time after the instance becomes eligible for destruction.
Destructor implicitly calls Finalize on the base class of object.
Ex:1-
class First
{
    ~First()
    {
        System.Console.WriteLine("First's destructor is called");
    }
}
class Second : First
{
    ~Second()
    {
        System.Console.WriteLine("Second's destructor is called");
    }
}
class Third : Second
{
    ~Third()
    {
        System.Console.WriteLine("Third's destructor is called");
    }
}
class TestDestructors
{
    static void Main()
    {
        Third t = new Third();
    }
}

third
second
first
Ex:-2-
using System;
namespace ConsoleApplication3
{
class SampleA
{
// Constructor
public SampleA()
{
Console.WriteLine("An  Instance  Created");
}
// Destructor
~SampleA()
{
Console.WriteLine("An  Instance  Destroyed");
}
}

class Program
{
public static void Test()
{
SampleA T = new SampleA(); // Created instance of class
}
static void Main(string[] args)
{
Test();
GC.Collect();
Console.ReadLine();
}
}
}
When we run above program it will show output like as shown below

Output
An instance created
An instance destroyed
Ex:3-
using System;
class Program
{
    static void Main(string[] args)
    {
        Child child1 = new Child();
        Console.WriteLine("Child Object Created Suucessfully");
        Console.WriteLine("Press enter to Destroy it");
        Console.ReadLine();
        //child1 = null;
        Console.Read();
    }
}
class Base1
{
    public Base1()
    {
        Console.WriteLine("Creating Base1 object");
    }
    ~Base1()
    {
        Console.WriteLine("Destroying Base1 object");
    }
}
class Base2 : Base1
{
    public Base2()
    {
        Console.WriteLine("Creating Base2 object");
    }
    ~Base2()
    {
        Console.WriteLine("Destroying Base2 object");
    }
}
class Child : Base2
{
    public Child()
    {
        Console.WriteLine("Creating Child object");
    }
    ~Child()
    {
        Console.WriteLine("Destroying Child object");
    }
}
o/p-
Creating Base1 object
Creating Base2 object
Creating Child object
Child Object Created Suucessfully
Press enter to Destroy it


Destroying Child object
Destroying Base2 object
Destroying Base1 object