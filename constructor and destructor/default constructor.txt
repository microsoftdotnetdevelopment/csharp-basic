Constructor-
A special method of the class that will be automatically invoked when an instance of the class is created is called a constructor. 
The main use of constructors is to initialize private fields of the class while creating an instance for the class.
 When you have not created a constructor in the class, the compiler will automatically create a default constructor in the class. 
The default constructor initializes all numeric fields in the class to zero and all string and object fields to null.

Some of the key points regarding the Constructor are:
1-A class can have any number of constructors.
2-A constructor doesn't have any return type, not even void.
3-A static constructor can not be a parametrized constructor.
4-Within a class you can create only one static constructor. 


Constructors can be divided into 5 types:
1-Default Constructor
2-Parametrized Constructor
3-Copy Constructor
4-Static Constructor
5-Private Constructor 

Default Constructor
A constructor without any parameters is called a default constructor; in other words this type of constructor does not take parameters.
The drawback of a default constructor is that every instance of the class will be initialized to the same values and it is not possible to initialize each instance of the class to different values. 
The default constructor initializes:
All numeric fields in the class to zero.
All string and object fields to null.

Ex-1:-
using System;
namespace DefaultConstractor
 {
    class addition
    {
        int a, b; 
        public addition()   //default contructor
        {
            a = 100;
            b = 175;
        }
 
        public static void Main()
        {
            addition obj = new addition(); //an object is created , constructor is called
            Console.WriteLine(obj.a);
            Console.WriteLine(obj.b);
            Console.Read();
        }
      }
    }
o/p-
100
175
 