Extension methods enable you to add methods to existing types without creating a new derived type, recompiling, or otherwise modifying the original type
An extension method is a static method of a static class, where the "this" modifier is applied to the first parameter.
Ex:1-
using System;
using System.Text;

namespace ClassLibExtMethod
{
    public class Class1
    {
        public string Display()
        {
            return ("I m in Display");
        }

        public string Print()
        {
            return ("I m in Print");
        }
    }
}
//
using System;
using System.Text;
using ClassLibExtMethod;

namespace ExtensionMethod1
{
    public static class XX
    {
         public static void NewMethod(this Class1 ob)
        {
            Console.WriteLine("Hello I m extended method");
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            Class1 ob = new Class1();
            ob.Display();
            ob.Print();
            ob.NewMethod();
            Console.ReadKey();
        }
    }
}
Ex:2-Without extension
using System;
class Program
{
    static int vow(string m)
    {
        int i, c = 0;
        for (i = 0; i < m.Length; i++)
        {
             if (m[i] == 'a' || m[i] == 'e' || m[i] == 'i' || m[i] == 'o' || m[i] == 'u')
            {
                c++;
            }
        }
        return c;

    }
    static void Main(string[] args)
    {
        string n = Console.ReadLine();

       int p= vow(n);
        Console.Write(p);
    }   }

using extension method
using System;
namespace program
{
    static class Program
    {


        public static int vow(this string m)
        {
            int i, c = 0;
            for (i = 0; i < m.Length; i++)
            {
                if (m[i] == 'a' || m[i] == 'e' || m[i] == 'i' || m[i] == 'o' || m[i] == 'u')
                {
                    c++;
                }
            }
            return c;

        }
        class th
        {

            static void Main(string[] args)
            {
                string n = Console.ReadLine();
                Console.WriteLine(n.vow());
            }}}}
Ex:3-without extension
using System;
class Program
{
   
    static void left(string p,int q)
    {
        int i;
        char[] ch = p.ToCharArray();
        for (i = 0; i < q; i++)
        {
            Console.WriteLine(ch[i]);
        }
    }
    static void Main(string[] args)
    {
       
        string p = Console.ReadLine();
        int q = int.Parse(Console.ReadLine());
        left(p,q);      
 }     
}
with extension-
using System;
static class Program
{

    public static void left(this int q,string p)
    {
        int i;
        char[] ch = p.ToCharArray();
        for (i = 0; i < q; i++)
        {
            Console.WriteLine(ch[i]);
        }
    }
    class th
    {
        static void Main(string[] args)
        {

            string p = Console.ReadLine();
            int q = int.Parse(Console.ReadLine());
            q.left(p);
        }}}


Ex:4-
public static class MyExtensions
{
    public static int WordCount(this String str)
    {
        return str.Split(new char[] { ' ', '.', ',' }).Length;
    }
} 


class Program
{
    public static void Main(string[] args)
    {
        string s = "Dot Net Tricks Extension Method Example";
        int i = s.WordCount();
        Console.WriteLine(i);
    }
} 

Ex:5-
public static class MyExtensions
{
    public static string UppercaseFirstLetter(this string value)
    {         
        if (value.Length > 0)
        {
            char[] array = value.ToCharArray();
            array[0] = char.ToUpper(array[0]);
            return new string(array);
        }
        return value;
    }
}

class Program
{
    public static void Main(string[] args)
    {
        string value = "dot net perls";
        value = value.UppercaseFirstLetter();
        Console.WriteLine(value);
    }
} 