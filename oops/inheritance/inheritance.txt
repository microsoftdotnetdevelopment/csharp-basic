it is the process by which one object acquires state and behavious of another object.
Inheritance allows us to define a class in terms of another class, which makes it easier to create and maintain an application. 
This also provides an opportunity to reuse the code functionality and speeds up implementation time.
The idea of inheritance implements the IS-A relationship. For example, mammal IS A animal, dog IS-A mammal hence dog IS-A animal as well, and so on.
It allows code reuse.
Types-
1-single
2-hierrarichal
3-multilevel
4-multiple(using interface)

Terminology-
Base class 
Derived class

1-class A
class B:A

2-class A
class B:A
class C:A
class D:A

3-class A
class B:A
class C:B

4-interface A
interface B
interface C:A,B

Ex:1-
using System;
namespace InheritanceApplication
{
    class Shape
    {
        public void setWidth(int w)
        {
            width = w;
        }
        public void setHeight(int h)
        {
            height = h;
        }
        protected int width;
        protected int height;
    }

    // Derived class
    class Rectangle : Shape
    {
        public int getArea()
        {
            return (width * height);
        }
    }

    class RectangleTester
    {
        static void Main(string[] args)
        {
            Rectangle Rect = new Rectangle();

            Rect.setWidth(5);
            Rect.setHeight(7);

            // Print the area of the object.
            Console.WriteLine("Total area: {0}", Rect.getArea());
            Console.ReadKey();
        }
    }
}
Ex:2-
using System;
class A
{
    public A(int a)
    {
        a++;
        Console.WriteLine("a: "+a);
    }
}
class B : A
{
    public B(int a,int b) : base(a)
    {
        Console.WriteLine("a:{0},b:{1}",a,b);
    }
}

class Program
{
    static void Main(string[] args)
    {
        B ob = new B(2, 3);
    }
}
Ex:3-
public class ParentClass
    {
        public ParentClass()
        {
            Console.WriteLine("Parent Constructor.");
        }

        public void print()
        {
            Console.WriteLine("I'm a Parent Class.");
        }
    }

public class ChildClass : ParentClass
    {
        public ChildClass()
        {
            Console.WriteLine("Child Constructor.");
        }
    }

class Program
    {
        static void Main(string[] args)
        {
            ChildClass objChild = new ChildClass();

            //Child class don't have print() method but we inherited from "ParentClass" class
            objChild.print();

            Console.Read();
        }
    }
o/p-
Parent Constructor.
Child Constructor.
I'm a Parent Class.