Array Overview

An array has the following properties:

    1. An array can be Single-Dimensional, Multidimensional or Jagged.

    2. The number of dimensions and the length of each dimension are established when the array instance is created. These values can't be changed during the lifetime of the instance.

    3. The new operator is used to create the array and initialize the array elements to their default values.The default values of numeric array elements are set to zero, and reference elements are set to null.

    4. A jagged array is an array of arrays, and therefore its elements are reference types and are initialized to null.

    5. Arrays are zero indexed: an array with n elements is indexed from 0 to n-1.

    6. Array elements can be of any type, including an array type.

    7. Array types are reference types derived from the abstract base type Array. Since this type implements IEnumerable and IEnumerable<T>, you can use foreach iteration on all arrays in C#.

   8. In C#, arrays are actually objects, and not just addressable regions of contiguous memory as in C and C++. Array is the abstract base type of all array types. You can use the properties, and other class members, that Array has.

  9. You can store multiple variables of the same type in an array data structure. You declare an array by specifying the type of its elements.	

10. Various ways to work with arrays ( single, multi-demensional , jagged ):

class TestArraysClass
{
    static void Main()
    {
        // Declare a single-dimensional array 
        int[] array1 = new int[5];

        // Declare and set array element values
        int[] array2 = new int[] { 1, 3, 5, 7, 9 };

        // Alternative syntax
        int[] array3 = { 1, 2, 3, 4, 5, 6 };

        // Declare a two dimensional array
        int[,] multiDimensionalArray1 = new int[2, 3];

        // Declare and set array element values
        int[,] multiDimensionalArray2 = { { 1, 2, 3 }, { 4, 5, 6 } };

        // Declare a jagged array
        int[][] jaggedArray = new int[6][];

        // Set the values of the first array in the jagged array structure
        jaggedArray[0] = new int[4] { 1, 2, 3, 4 };

	//A string array can be initialized in the same way.
	string[] weekDays = { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };
    }
}

11.A jagged array is an array whose elements are arrays. The elements of a jagged array can be of different dimensions and sizes. A jagged array is sometimes called an "array of arrays." 

12. The following is a declaration of a single-dimensional array that has three elements, each of which is a single-dimensional array of integers: int[][] jaggedArray = new int[3][];

13. A jagged array is an array of arrays, and therefore its elements are reference types and are initialized to null.
	

12. It is possible to mix jagged and multidimensional arrays. The following is a declaration and initialization of a single-dimensional jagged array that contains three two-dimensional array elements of different sizes. Ex:
	int[][,] jaggedArray4 = new int[3][,] 
        {
            new int[,] { {1,3}, {5,7} },
            new int[,] { {0,2}, {4,6}, {8,10} },
            new int[,] { {11,22}, {99,88}, {0,9} } 
        };

13. The method Length returns the number of arrays contained in the jagged array.
14. You can use foreach loop to iterate the elements for both single and multi-dimensional array.
15.Arrays can be passed as arguments to method parameters. Because arrays are reference types, the method can change the value of the elements.
16. You can also use ref and out keyword to pass array as parameter . Note : Please find the difference between passing array as paremeter without ref and with ref.
17.You can create an implicitly-typed array in which the type of the array instance is inferred from the elements specified in the array initializer. Implicitly-typed arrays are usually used in query expressions together with anonymous types and object and collection initializers.

18 .Example of Implicit type arrays :

 class ImplicitlyTypedArraySample
            {
                static void Main()
                {
                    var a = new[] { 1, 10, 100, 1000 }; // int[]
                    var b = new[] { "hello", null, "world" }; // string[]

                    // single-dimension jagged array
                    var c = new[]   
            {  
                new[]{1,2,3,4},
                new[]{5,6,7,8}
            };

                    // jagged array of strings
                    var d = new[]   
            {
                new[]{"Luca", "Mads", "Luke", "Dinesh"},
                new[]{"Karen", "Suma", "Frances"}
            };
                }
            }
In the previous example, notice that with implicitly-typed arrays, no square brackets are used on the left side of the initialization statement. Note also that jagged arrays are initialized by using new [] just like single-dimension arrays.

19. When you create an anonymous type that contains an array, the array must be implicitly typed in the type's object initializer. In the following example, contacts is an implicitly-typed array of anonymous types, each of which contains an array named PhoneNumbers. Note that the var keyword is not used inside the object initializers.
 var contacts = new[] 
            {
                new {
                        Name = " Eugene Zabokritski",
                        PhoneNumbers = new[] { "206-555-0108", "425-555-0001" }
                    },
                new {
                        Name = " Hanying Feng",
                        PhoneNumbers = new[] { "650-555-0199" }
                    }
            };
---------------------------------------------------------About Array Class--------------------------------------------

20. Array class Provides methods for creating, manipulating, searching, and sorting arrays, thereby serving as the base class for all arrays in the common language runtime.

21. The Array class is not part of the System.Collections namespaces. However, it is still considered a collection because it is based on the IList interface. 

22. The Array class is the base class for language implementations that support arrays. However, only the system and compilers can derive explicitly from the Array class. Users should employ the array constructs provided by the language.

23.An element is a value in an Array. The length of an Array is the total number of elements it can contain. The lower bound of an Array is the index of its first element. An Array can have any lower bound, but it has a lower bound of zero by default.

24.A multidimensional Array can have different bounds for each dimension.

25.  An array can have a maximum of 32 dimensions.

26.Unlike the classes in the System.Collections namespaces, Array has a fixed capacity. To increase the capacity, you must create a new Array object with the required capacity, copy the elements from the old Array object to the new one, and delete the old Array.

27.By default, the maximum size of an Array is 2 gigabytes (GB).

28. Starting with the .NET Framework 2.0, the Array class implements the System.Collections.Generic.IList<T>, System.Collections.Generic.ICollection<T>, and System.Collections.Generic.IEnumerable<T> generic interfaces. The implementations are provided to arrays at run time, and as a result, the generic interfaces do not appear in the declaration syntax for the Array class. 

29.The Array.Copy method copies elements not only between arrays of the same type but also between standard arrays of different types; it handles type casting automatically.

30. Learn the working of Some methods of Array class, such as CreateInstance, Copy, CopyTo, GetValue, and SetValue. 

Example for CreateInstance and SetValue:

   Array my1DArray=Array.CreateInstance( typeof(Int32), 5 );
      for ( int i = my1DArray.GetLowerBound(0); i <= my1DArray.GetUpperBound(0); i++ )
         my1DArray.SetValue( i+1, i );


31 . Explore all used methods and properties for array.

---------------------------------------
An array is a collection of similar data types.
Advantages: Arrays are strongly typed.
Disadvantages: Arrays cannot grow in size once initialized. Have to rely on integral indices to store or retrieve items from the array



